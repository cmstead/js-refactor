{
  "name": "jsrefactor",
  "displayName": "JS Refactor (Deprecated)",
  "description": "Automated refactoring tools to smooth your development workflow",
  "version": "2.20.8",
  "publisher": "cmstead",
  "repository": {
    "url": "https://github.com/cmstead/js-refactor.git",
    "type": "git"
  },
  "author": {
    "name": "Chris Stead"
  },
  "engines": {
    "vscode": "^0.12.0"
  },
  "main": "./extension",
  "scripts": {
    "test": "npm run behavior-tests && npm run unit-tests & npm run integration-tests",
    "behavior-tests": "node ./node_modules/mocha/bin/mocha ./test/_behavior/commands/**/*.test.js ./test/_behavior/**/*.test.js",
    "integration-tests": "node ./node_modules/mocha/bin/mocha ./test/integration/**/*.test.js",
    "unit-tests": "node ./node_modules/mocha/bin/mocha ./test/unit/**/*.test.js",
    "commit": "node ./node_modules/nanocommit/",
    "build": "tfx extension create --manifest-globs vss-integration.json",
    "build-docs": "node build-docs",
    "publish": "vsce publish"
  },
  "categories": [
    "Formatters",
    "Programming Languages",
    "Other",
    "Snippets"
  ],
  "activationEvents": [
    "onCommand:cmstead.jsRefactor.convertToArrowFunction",
    "onCommand:cmstead.jsRefactor.convertToFunctionDeclaration",
    "onCommand:cmstead.jsRefactor.convertToFunctionExpression",
    "onCommand:cmstead.jsRefactor.convertToTemplateLiteral",
    "onCommand:cmstead.jsRefactor.addExport",
    "onCommand:cmstead.jsRefactor.extractMethod",
    "onCommand:cmstead.jsRefactor.extractVariable",
    "onCommand:cmstead.jsRefactor.inlineVariable",
    "onCommand:cmstead.jsRefactor.introduceFunction",
    "onCommand:cmstead.jsRefactor.liftAndNameFunctionExpression",
    "onCommand:cmstead.jsRefactor.markAsAsync",
    "onCommand:cmstead.jsRefactor.negateExpression",
    "onCommand:cmstead.jsRefactor.selectRefactoring",
    "onCommand:cmstead.jsRefactor.shiftParams",
    "onCommand:cmstead.jsRefactor.rename",
    "onCommand:cmstead.jsRefactor.wrapInArrowFunction",
    "onCommand:cmstead.jsRefactor.wrapInAsyncFunction",
    "onCommand:cmstead.jsRefactor.wrapInCondition",
    "onCommand:cmstead.jsRefactor.wrapInFunction",
    "onCommand:cmstead.jsRefactor.wrapInGenerator",
    "onCommand:cmstead.jsRefactor.wrapInIIFE",
    "onCommand:cmstead.jsRefactor.wrapInTryCatch"
  ],
  "nanocommit": {
    "testCommand": "npm run test && npm run build-docs",
    "blindCommit": true
  },
  "tags": [
    "Javascript",
    "Refactoring",
    "Automation",
    "Language-support",
    "Snippets"
  ],
  "contributes": {
    "languages": [
      {
        "id": "javascript",
        "extensions": [
          ".js",
          ".vue"
        ],
        "aliases": [
          "JS"
        ]
      },
      {
        "id": "vue",
        "extensions": [
          ".vue"
        ],
        "aliases": [
          "Vue"
        ]
      },
      {
        "id": "javascriptreact",
        "extensions": [
          ".jsx"
        ],
        "aliases": []
      },
      {
        "id": "typescript",
        "extensions": [
          ".ts"
        ],
        "aliases": [
          "TS"
        ]
      },
      {
        "id": "typescriptreact",
        "extensions": [
          ".tsx"
        ],
        "aliases": []
      },
      {
        "id": "html",
        "extensions": [
          ".htm",
          ".html"
        ],
        "aliases": [
          "HTML"
        ]
      }
    ],
    "snippets": [
      {
        "language": "javascript",
        "path": "./snippets/jsrefactor.json"
      },
      {
        "language": "typescript",
        "path": "./snippets/jsrefactor.json"
      },
      {
        "language": "javascriptreact",
        "path": "./snippets/jsrefactor.json"
      },
      {
        "language": "typescriptreact",
        "path": "./snippets/jsrefactor.json"
      },
      {
        "language": "html",
        "path": "./snippets/jsrefactor.json"
      }
    ],
    "commands": [
      {
        "command": "cmstead.jsRefactor.convertToArrowFunction",
        "title": "JS Refactor: Convert To Arrow Function",
        "description": "Convert function from a function expression to an arrow function"
      },
      {
        "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
        "title": "JS Refactor: Convert To Function Declaration",
        "description": "Convert function expression assignment to a function declaration"
      },
      {
        "command": "cmstead.jsRefactor.convertToFunctionExpression",
        "title": "JS Refactor: Convert To Function Expression",
        "description": "Convert arrow function to a function expression"
      },
      {
        "command": "cmstead.jsRefactor.convertToTemplateLiteral",
        "title": "JS Refactor: Convert String Concat To Template Literal",
        "description": "Convert string concatenation expression to template literal"
      },
      {
        "command": "cmstead.jsRefactor.addExport",
        "title": "JS Refactor: Add Export",
        "description": "Export function or variable declaration from local module"
      },
      {
        "command": "cmstead.jsRefactor.extractMethod",
        "title": "JS Refactor: Extract Method",
        "description": "Extract selection into a new function"
      },
      {
        "command": "cmstead.jsRefactor.extractVariable",
        "title": "JS Refactor: Extract Variable",
        "description": "Extract value into a variable"
      },
      {
        "command": "cmstead.jsRefactor.inlineVariable",
        "title": "JS Refactor: Inline Variable",
        "description": "Inline variable"
      },
      {
        "command": "cmstead.jsRefactor.introduceFunction",
        "title": "JS Refactor: Introduce Function",
        "description": "Introduce function from call or variable assignment"
      },
      {
        "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
        "title": "JS Refactor: Lift and Name Function Expression",
        "description": "Lift function expression out of current context and add a name"
      },
      {
        "command": "cmstead.jsRefactor.markAsAsync",
        "title": "JS Refactor: Mark Function as Async",
        "description": "Mark Function as Async"
      },
      {
        "command": "cmstead.jsRefactor.negateExpression",
        "title": "JS Refactor: Negate Expression",
        "description": "Negate Expression"
      },
      {
        "command": "cmstead.jsRefactor.rename",
        "title": "JS Refactor: Rename (F2 alias)",
        "description": "Rename"
      },
      {
        "command": "cmstead.jsRefactor.selectRefactoring",
        "title": "JS Refactor: Select From All Refactorings and Actions",
        "description": "Select refactoring or action to apply"
      },
      {
        "command": "cmstead.jsRefactor.shiftParams",
        "title": "JS Refactor: Shift Parameters",
        "description": "Shift function parameters to new positions"
      },
      {
        "command": "cmstead.jsRefactor.wrapInArrowFunction",
        "title": "JS Refactor: Wrap In Arrow Function",
        "description": "Wrap code in an arrow function"
      },
      {
        "command": "cmstead.jsRefactor.wrapInAsyncFunction",
        "title": "JS Refactor: Wrap In Async Function",
        "description": "Wrap code in an async function"
      },
      {
        "command": "cmstead.jsRefactor.wrapInCondition",
        "title": "JS Refactor: Wrap In Condition",
        "description": "Wrap code in a condition block"
      },
      {
        "command": "cmstead.jsRefactor.wrapInFunction",
        "title": "JS Refactor: Wrap In Function",
        "description": "Wrap code in a named function"
      },
      {
        "command": "cmstead.jsRefactor.wrapInGenerator",
        "title": "JS Refactor: Wrap In Generator",
        "description": "Wrap code in a named generator"
      },
      {
        "command": "cmstead.jsRefactor.wrapInIIFE",
        "title": "JS Refactor: Wrap In IIFE",
        "description": "Wrap code in an immediately invoked function expression"
      },
      {
        "command": "cmstead.jsRefactor.wrapInTryCatch",
        "title": "JS Refactor: Wrap In Try/Catch Block",
        "description": "Wrap code in a try/catch block"
      },
      {
        "command": "cmstead.jsRefactor.wrapSelection",
        "title": "JS Refactor: Convert - Wrap Selection",
        "description": "Wrap selected code with generated code"
      }
    ],
    "keybindings": [
      {
        "command": "cmstead.jsRefactor.selectRefactoring",
        "key": "ctrl+shift+j r",
        "mac": "cmd+shift+j r"
      },
      {
        "command": "cmstead.jsRefactor.extractMethod",
        "key": "ctrl+shift+j m",
        "mac": "cmd+shift+j m",
        "when": "editorHasSelection"
      },
      {
        "command": "cmstead.jsRefactor.extractVariable",
        "key": "ctrl+shift+j v",
        "mac": "cmd+shift+j v",
        "when": "editorHasSelection"
      },
      {
        "command": "cmstead.jsRefactor.inlineVariable",
        "key": "ctrl+shift+j i",
        "mac": "cmd+shift+j i"
      },
      {
        "command": "cmstead.jsRefactor.convertToArrowFunction",
        "key": "ctrl+shift+j a",
        "mac": "cmd+shift+j a"
      },
      {
        "command": "cmstead.jsRefactor.convertToFunctionExpression",
        "key": "ctrl+shift+j f",
        "mac": "cmd+shift+j f"
      },
      {
        "command": "cmstead.jsRefactor.convertToTemplateLiteral",
        "key": "ctrl+shift+j l",
        "mac": "cmd+shift+j l"
      },
      {
        "command": "cmstead.jsRefactor.addExport",
        "key": "ctrl+shift+j x",
        "mac": "cmd+shift+j x"
      },
      {
        "command": "cmstead.jsRefactor.shiftParams",
        "key": "ctrl+shift+j p",
        "mac": "cmd+shift+j p"
      },
      {
        "command": "cmstead.jsRefactor.markAsAsync",
        "key": "ctrl+shift+j s",
        "mac": "cmd+shift+j s"
      },
      {
        "command": "cmstead.jsRefactor.wrapSelection",
        "key": "ctrl+shift+j w",
        "mac": "cmd+shift+j w",
        "when": "editorHasSelection"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && editorLangId == html"
        }
      ],
      "editor/context": [
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionDeclaration",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "group": "5_refactor",
          "when": "editorHasSelection && editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.liftAndNameFunctionExpression",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.markAsAsync",
          "group": "5_refactor",
          "when": "editorLangId == html"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "group": "5_refactor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "group": "5_refactor",
          "when": "editorLangId == vue"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "group": "5_refactor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "group": "5_refactor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "group": "5_refactor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "group": "5_refactor",
          "when": "editorLangId == html"
        }
      ]
    }
  },
  "dependencies": {
    "@typescript-eslint/typescript-estree": "^2.8.0",
    "dject": "^1.18.1",
    "espree": "^6.1.2",
    "estraverse": "^4.2.0",
    "jfp": "^4.0.0",
    "semver-compare": "^1.0.0",
    "signet": "^6.4.2",
    "typescript": "^3.6.4"
  },
  "devDependencies": {
    "approvals": "https://github.com/cmstead/Approvals.NodeJS.git",
    "chai": "^3.4.1",
    "datamother": "^2.2.4",
    "eslint": "^4.3.0",
    "fluent-gwt": "^2.2.0",
    "gulp": "^3.9.1",
    "mocha": "^2.3.4",
    "mockery": "^1.4.0",
    "nanocommit": "^1.0.3",
    "sinon": "^1.17.2",
    "vscode": "^1.1.8"
  },
  "links": {
    "getstarted": {
      "uri": "https://github.com/cmstead/js-refactor/blob/master/README.md"
    },
    "support": {
      "uri": "https://github.com/cmstead/js-refactor/issues"
    }
  },
  "icon": "images/js-refactor-icon.png",
  "galleryBanner": {
    "color": "#ffffee"
  },
  "public": true
}
